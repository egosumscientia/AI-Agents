print("ðŸ”¥ escalation.py CARGADO desde:", __file__)

# -*- coding: utf-8 -*-
"""
AI-FoodSales â€¢ Escalamiento v1.4.1
Autor: Paulo & GPT-5 Lab

DescripciÃ³n:
    DetecciÃ³n avanzada de reclamos:
      - Cobertura completa del vocabulario original
      - Fuzzy matching (errores ortogrÃ¡ficos comunes)
      - TraducciÃ³n ligera inglÃ©sâ†’espaÃ±ol
      - DetecciÃ³n de sarcasmo o frustraciÃ³n
      - Regla: reclamo > cortesÃ­a
      - Respuesta y summary estructurados
"""

import re, difflib
from dataclasses import dataclass
from typing import Dict, List


# ---------------------------
# LÃ©xicos base
# ---------------------------

POLITENESS = {
    "por favor","porfa","gracias","mil gracias","buen dia","buen dÃ­a",
    "buenas","buenas tardes","buenas noches","hola","agradezco","si son tan amables",
    "muy amable","de acuerdo","vale","ok","entendido"
}

# Todas las frases del escalation_keywords original + raÃ­ces abreviadas
COMPLAINT_ROOTS = {
    # Reclamos y problemas generales
    "reclamo","problema","queja","error","equivocado","mal","malo","defectuoso",
    "descompuesto","deteriorado","confusion","confundi","en mal estado",
    "no entiendo","no corresponde","daÃ±ado","inservible","roto","podrido","vencido",
    "quebrado","incompleto","faltantes","menos productos","menos de lo solicitado",
    "precio diferente","precio distinto","factura diferente",
    # Pedidos y entregas con error
    "pedido incorrecto","producto equivocado","me llego mal","no ha llegado","no llego",
    "no me llego","no me ha llegado","vino incompleto","llego incompleto",
    "entregaron incompleto","pedido incompleto","entrega incompleta","faltante",
    "falto","faltaron","no completo","menos de lo pedido","demora","retraso","tarde",
    "no aparece","todavia no llega","entrega pendiente","repartidor","no pudo entregar",
    "no puede entregar","pedido vino incompleto","vino mal","vino con faltantes",
    "mal despachado","error de despacho","fria", "frÃ­o", "comida fria", "comida frÃ­a",
    # Casos administrativos o de soporte documental
    "contrato","certificado adicional","certificado invima","documento adicional",
    "invima","soporte adicional",
    # Casos financieros o de cobro
    "cobrado","me cobraron","cobraron","cobrar","cobro incorrecto","precio distinto",
    "error en factura","cobro duplicado","error en cobro","factura mal",
    "valor diferente","costo equivocado","precio errado","precio equivocado",
    "precio incorrecto","sobreprecio","sobre cobro","me cobraron de mas",
    # RaÃ­ces genÃ©ricas abreviadas
    "cobr","reembols","devolu","tard","retras","demor","no lleg","falt","incomplet",
    "equivocad","cancel","estaf","fraud","frio","malis","pesim","horrible","terrible"
}

FRUSTRATION_MARKS = {"ðŸ˜’","ðŸ™ƒ","ðŸ˜¤","ðŸ˜ ","ðŸ¤¦","ðŸ¤¬","ðŸ’¢"}

EN_TO_ES_GLOSSARY = {
    # Cobros / facturaciÃ³n
    "charge":"cobr","charged":"cobr","charge me twice":"cobr","charged me twice":"cobr",
    "they charged me":"cobr","they charged me twice":"cobr","double charge":"cobr",
    "overcharge":"cobr","overcharged":"cobr","extra charge":"cobr","wrong charge":"cobr",
    "billing error":"cobr","invoice error":"cobr","wrong price":"cobr","wrong amount":"cobr",
    "double charged":"cobr","charged again":"cobr","charged extra":"cobr","twice":"duplicado",

    # Reembolsos
    "refund":"reembols","refunded":"reembols","refund me":"reembols","money back":"reembols",
    "need a refund":"reembols","return my money":"reembols","no refund":"reembols",

    # Entregas tardÃ­as o no llegadas
    "never arrived":"no lleg","didn't arrive":"no lleg","not delivered":"no lleg",
    "never delivered":"no lleg","hasn't arrived":"no lleg","delivery failed":"no lleg",
    "where is my order":"no lleg","late":"retras","too late":"retras","delay":"retras",
    "delayed":"retras","running late":"retras","still waiting":"demor","taking too long":"demor",

    # Faltantes / incompletos / errores
    "missing":"falt","missing item":"falt","missing items":"falt","incomplete":"incomplet",
    "incomplete order":"incomplet","partial order":"incomplet",
    "wrong item":"equivocad","wrong product":"equivocad","wrong order":"equivocad",

    # Calidad o estado del producto
    "bad":"mal","awful":"horrible","terrible":"terrible","cold":"frio",
    "cold food":"frio","food was cold":"frio","spoiled":"podrido","rotten":"podrido",
    "expired":"vencido","broken":"roto","damaged":"danado",

    # Cancelaciones
    "cancel":"cancel","canceled":"cancel","cancelled":"cancel",
    "please cancel":"cancel","cancel my order":"cancel","i want to cancel":"cancel",
}


SARCASM_POS_MARKERS = {
    # Positivos exagerados (comunes en sarcasmo)
    "increible","increÃ­ble","maravilloso","fantastico","fantÃ¡stico",
    "genial","excelente","perfecto","magnifico","magnÃ­fico",
    "espectacular","grandioso","buenisimo","buenÃ­simo","formidable",
    "impresionante","fenomenal","divino","maravilla","fantasia","fantasÃ­a",
    "de lujo","de maravilla","de diez","de pelicula","de pelÃ­cula",

    # IronÃ­as frecuentes en contexto de reclamo
    "claro","por supuesto","seguro","obvio","como no",
    "si claro","ah claro","ah buenisimo","ah buenÃ­simo","ah excelente",
    "ah genial","ah perfecto","ah fantÃ¡stico",

    # Sarcasmo informal / redes sociales
    "wow","super","sÃºper","super bien","super bueno","super servicio",
    "re bien","rebueno","super rapido","super rÃ¡pido","rapidisimo","rapidÃ­simo",
    "que alegria","que alegrÃ­a","felicidades","bravo","premio","aplausos",

    # Variantes con tono irÃ³nico / frustraciÃ³n disimulada
    "maravillosa atencion","excelente servicio","servicio impecable",
    "todo perfecto","como siempre","una joya","de lo mejor","mejor imposible",
    "sin palabras","buen trabajo","feliz con esto","todo un exito","todo un Ã©xito"
}


NEGATIONS = {"no","nunca","jamÃ¡s","ni"}

COMMON_FIXES = {
    # Reclamos / devoluciones / reembolsos
    "reembolzo":"reembolso","rebolso":"reembolso","reemborso":"reembolso","reembolco":"reembolso",
    "reembolo":"reembolso","reemboso":"reembolso","reembolsar":"reembolso",
    "rebolsaron":"reembolsaron","reembolzaron":"reembolsaron",
    "rebolsar":"reembolsar","reembolzar":"reembolsar",
    "rebolso mal":"reembolso mal","reembolzo mal":"reembolso mal",
    "debolucion":"devolucion","debolver":"devolver","debolvieron":"devolvieron",
    "devolber":"devolver","devolbieron":"devolvieron",

    # Tiempos / demoras / entregas
    "tade":"tarde","tardea":"tarde","retaso":"retraso","retasado":"retrasado",
    "demorao":"demorado","demorau":"demorado","demorardo":"demorado",
    "demoraronse":"demoraron","demorazado":"demorado",
    "retasaron":"retrasaron","retrasao":"retrasado","tadanza":"tardanza",
    "retrasado":"retraso","tardeza":"tardanza",

    # Faltantes / incompletos
    "fataron":"faltaron","faltaronse":"faltaron","farton":"faltaron",
    "faltate":"faltante","faltanres":"faltantes","faltane":"faltante",
    "falto":"faltÃ³","faltan":"faltan","faltates":"faltantes",
    "falantes":"faltantes","faltente":"faltante","faltate":"faltante",

    # Cobros / precios / facturas
    "cobarro":"cobrar","cobor":"cobro","cobaron":"cobraron","cobrron":"cobraron",
    "cobrrado":"cobrado","cobaronme":"cobraronme","cobaro":"cobro",
    "cobrarro":"cobrar","cobrarron":"cobraron","cobarron":"cobraron",
    "cobrronme":"cobraronme","cobraronme":"cobraron","cobram":"cobran",
    "corbaron":"cobraron","cobrarr":"cobrar","cobro mal":"cobro mal",
    "sobreco":"sobrecobro","sobre cobr":"sobrecobro","sobrecobr":"sobrecobro",

    # Adjetivos / tono
    "exelente":"excelente","exelentee":"excelente","exselente":"excelente",
    "exelent":"excelente","eselente":"excelente","exclente":"excelente",
    "malo":"malo","malisimo":"malÃ­simo","malisimo":"malÃ­simo",
    "orible":"horrible","orrible":"horrible","horible":"horrible",
    "terrivle":"terrible","terible":"terrible","horrivle":"horrible",

    # Productos / pedidos
    "pedio":"pedido","peido":"pedido","pedidio":"pedido","pedidido":"pedido",
    "pidido":"pedido","pidio":"pedido","peddio":"pedido",
    "incomple":"incompleto","incompl":"incompleto","incoml":"incompleto",
    "incompletoo":"incompleto","incomplet":"incompleto","inconpleto":"incompleto",
    "incomplto":"incompleto","incomplleto":"incompleto",
    "prodcuto":"producto","prudcto":"producto","prdducto":"producto",
    "prodocto":"producto","produccto":"producto","prodcto":"producto",

    # Otros frecuentes
    "enrega":"entrega","entregaado":"entregado","entregra":"entrega",
    "entergaron":"entregaron","entrego":"entregÃ³","entregon":"entregaron",
    "enviado mal":"envÃ­o mal","envioo":"envÃ­o","enbiÃ³":"enviÃ³",
    "enbvio":"envÃ­o","enbio":"envÃ­o","enbiÃ³":"enviÃ³",
    "comida fria":"comida frÃ­a","fria":"frÃ­a","frio":"frÃ­o",
    "cancelado":"cancelado","cancelaron":"cancelaron","cancelaro":"cancelaron",
    "cancelado mal":"cancelado mal","cancelaronme":"cancelaronme"
}


# ---------------------------
# Utilidades
# ---------------------------

def normalize(text: str) -> str:
    # Paso 1: todo a minÃºsculas
    t = text.lower()

    # Paso 2: traducciÃ³n ligera inglÃ©sâ†’espaÃ±ol
    for k, v in EN_TO_ES_GLOSSARY.items():
        if k in t:
            t = t.replace(k, v)

    # Paso 3: normalizar tildes
    t = (t.replace("Ã¡","a").replace("Ã©","e").replace("Ã­","i")
           .replace("Ã³","o").replace("Ãº","u"))

    # Paso 4: correcciones ortogrÃ¡ficas comunes
    for w, r in COMMON_FIXES.items():
        t = t.replace(w, r)

    # ðŸŸ¢ Paso 5: conservar emojis y signos de frustraciÃ³n
    t = re.sub(r"[^a-z0-9\sÃ±ðŸ˜’ðŸ˜‘ðŸ™ƒðŸ˜ ðŸ¤¦ðŸ¤·]", " ", t)

    # Paso 6: limpiar espacios duplicados
    return re.sub(r"\s+"," ",t).strip()

def tokens(text: str) -> List[str]:
    return re.findall(r"[\wÂ¿?Â¡!']+", text.lower())

def ratio(a:str,b:str)->float:
    return difflib.SequenceMatcher(None,a,b).ratio()

def fuzzy_contains(text:str, root:str, threshold:float=0.82)->bool:
    for tok in tokens(text):
        if ratio(tok,root)>=threshold or root in tok:
            return True
    return False

def any_emoji(text:str)->bool:
    return any(e in text for e in FRUSTRATION_MARKS)

def map_english_to_spanish_roots(text:str)->List[str]:
    hits=[]
    for en,es in EN_TO_ES_GLOSSARY.items():
        if en in text.lower():
            hits.append(es)
    return hits


# ---------------------------
# Scoring
# ---------------------------

@dataclass
class Scores:
    complaint: float = 0.0
    sarcasm: float = 0.0
    politeness: float = 0.0
    cues: Dict[str, List[str]] = None
    def __post_init__(self):
        if self.cues is None:
            self.cues={"complaint":[], "sarcasm":[], "politeness":[]}


THRESHOLDS={"complaint":1.3,"soft":1.0,"sarcasm":0.4}
WEIGHTS={"exact":1.0,"fuzzy":0.8,"neg":0.5,"emoji":1.0,"eng":0.9,"sarc":1.4,"contrast":1.0}

def score_politeness(text:str, s:Scores):
    for p in POLITENESS:
        if p in text:
            s.politeness+=0.25; s.cues["politeness"].append(p)

def score_complaint(text:str, s:Scores):
    for r in COMPLAINT_ROOTS:
        if r in text:
            s.complaint+=WEIGHTS["exact"]; s.cues["complaint"].append(r)
        elif fuzzy_contains(text,r):
            s.complaint+=WEIGHTS["fuzzy"]; s.cues["complaint"].append("~"+r)
    for n in NEGATIONS:
        if re.search(rf"\b{n}\b",text):
            s.complaint+=WEIGHTS["neg"]; s.cues["complaint"].append("neg:"+n)
    if any_emoji(text):
        s.complaint+=WEIGHTS["emoji"]; s.cues["complaint"].append("emoji")
    for r in map_english_to_spanish_roots(text):
        s.complaint+=WEIGHTS["eng"]; s.cues["complaint"].append("enâ†’"+r)

def score_sarcasm(text: str, s: Scores):
    # sarcasmo positivo + negativo (base original)
    pos = any(p in text for p in SARCASM_POS_MARKERS)
    neg = any(n in text for n in NEGATIONS) or any(r in text for r in COMPLAINT_ROOTS)
    if pos and neg:
        s.sarcasm += WEIGHTS["sarc"]
        s.cues["sarcasm"].append("pos+neg")

    # sarcasmo con elogio + espera o frustraciÃ³n
    elif pos and re.search(r"(pedido|esperando|lleg|comida|tarde|nada|fr[iÃ­]a|frio|demora|aun|todav[iÃ­]a)", text):
        s.sarcasm += WEIGHTS["sarc"] * 0.9
        s.cues["sarcasm"].append("pos+espera")

    # sarcasmo contrastivo: "si es que", "claro que", "pero", "aunque"
    if re.search(r"(si es que|claro que|pero|aunque).{0,20}(llega|llego|funciona|resuelv|arregl)", text):
        s.sarcasm += WEIGHTS["contrast"]
        s.cues["sarcasm"].append("contrastive")

    # âœ… sarcasmo tipo elogio + reclamo (ajustado con impacto en complaint)
    if re.search(r"(incre[iÃ­]ble|fant[aÃ¡]stico|perfecto|excelente|genial).{0,80}(esperando|pedido|lleg|nada|fr[iÃ­]a|frio|tarde|demora|a[Ãºu]n|todav[iÃ­]a)", text):
        s.sarcasm += 1.5
        s.complaint += 0.5
        s.cues["sarcasm"].append("sarcasmo_contraste")

    # ironÃ­as de cortesÃ­a
    if re.search(r"(ah|muy|tan)\s?(buen[iÃ­]simo|excelente|amable|eficiente|r[aÃ¡]pido).{0,40}(nada|demora|problema|error|fall[oÃ³])", text):
        s.sarcasm += 1.0
        s.cues["sarcasm"].append("sarcasmo_ironia_cortesia")
    
    # sarcasmo cortÃ©s + frustraciÃ³n (ejemplo: "Perfecto, dos horas esperando y nada ðŸ˜‘")
    if re.search(r"(perfecto|excelente|genial|wow|incre[iÃ­]ble|fant[aÃ¡]stico)[^\\n]{0,150}(hora|horas|esperando|todav[iÃ­]a|nada|tarde|demora)", text, flags=re.IGNORECASE|re.UNICODE):
        s.sarcasm += 2.0
        s.complaint += 1.0
        s.cues["sarcasm"].append("sarcasmo_cortesia_frustrada")

    # emojis de frustraciÃ³n tras elogio
    if re.search(r"(ðŸ˜’|ðŸ˜‘|ðŸ™ƒ|ðŸ˜ |ðŸ¤¦|ðŸ¤·)", text):
        s.sarcasm += 0.8
        s.cues["sarcasm"].append("emoji_frustracion")

    # fuerza un mÃ­nimo de sarcasmo si hay emoji + palabra de espera
    if re.search(r"(ðŸ˜’|ðŸ˜‘|ðŸ™ƒ|ðŸ˜ |ðŸ¤¦|ðŸ¤·)", text) and re.search(r"(esperando|nada|tarde|pedido|lleg)", text):
        s.sarcasm = max(s.sarcasm, 1.0)
    
    # Corrige interferencia con cortesÃ­a: si hay sarcasmo y emoji frustraciÃ³n, reduce cortesÃ­a
    if s.sarcasm >= 0.8 and re.search(r"(ðŸ˜’|ðŸ˜‘|ðŸ™ƒ|ðŸ˜ |ðŸ¤¦|ðŸ¤·)", text):
        s.politeness = max(0.0, s.politeness - 1.0)

    # failsafe: si hay sarcasmo leve + palabras de espera, forzar reclamo implÃ­cito
    if s.sarcasm >= 1.0 and re.search(r"(esperando|hora|horas|nada|tarde|demora|todavia|aun)", text):
        s.complaint += 1.0

    # sarcasmo indirecto o irÃ³nico sin emoji
    if re.search(r"(aunque|pero|otra vez|por lo visto|sigan asÃ­|no es su fuerte).{0,40}", text):
        s.sarcasm += 1.0
        s.cues["sarcasm"].append("sarcasmo_indirecto")

    if re.search(r"(gracias|perfecto|excelente).{0,30}(pero|aunque|nada|sin)", text):
        s.sarcasm += 1.2
        s.complaint += 0.8
        s.cues["sarcasm"].append("sarcasmo_cortesia_falsa")

    # sarcasmo resignado o ironÃ­a pasiva (dinÃ¡mico con duraciÃ³n variable)
    if re.search(r"(alg[Ãºu]n d[iÃ­]a|paciencia|ya llegar[aÃ¡]|sigue igual|todo igual|sin resultado|ya van\s*[0-9]+\s*horas|[0-9]+\s*horas\s*(y\s*contando)?|hora[s]?\s*y\s*contando)", text):
        s.sarcasm += 1.0
        s.complaint += 0.5
        s.cues["sarcasm"].append("sarcasmo_resignado")

    # sarcasmo de falsa satisfacciÃ³n o ironÃ­a positiva ("me encanta esperar tanto")
    if re.search(r"(me\s+(encanta|fascina|gusta|alegra|maravilla).{0,40}(esperar|nada|demora|tarde|no\s+llega|sin|eficiencia|puntualidad|velocidad|lento))", text):
        s.sarcasm += 1.5
        s.complaint += 0.7
        s.cues["sarcasm"].append("sarcasmo_falsa_satisfaccion")

    # sarcasmo implÃ­cito con tono positivo + negaciÃ³n ("QuÃ© gusto da no recibir nada")
    if re.search(r"(qu[eÃ©]\s+(gusto|placer|alegr[iÃ­]a|maravilla).{0,30}(no|sin)\s+[a-zÃ¡Ã©Ã­Ã³ÃºÃ±]+)", text):
        s.sarcasm += 1.3
        s.complaint += 0.6
        s.cues["sarcasm"].append("sarcasmo_implicito_positivo")

    # sarcasmo con elogio y negaciÃ³n o contraste implÃ­cito ("quÃ© gusto da ver tanta eficiencia inexistente")
    if re.search(r"(qu[eÃ©]\s+(gusto|placer|maravilla|alegr[iÃ­]a|honor|satisfacci[oÃ³]n).{0,40}(inexistente|lento|sin|nada|ausente))", text):
        s.sarcasm += 1.4
        s.complaint += 0.6
        s.cues["sarcasm"].append("sarcasmo_elogio_negado")

    # sarcasmo seco o ironÃ­a implÃ­cita sin elogio directo
    if re.search(r"(quÃ©\s+(sorpresa|raro|eficiente|tranquilo|emocionante|normal)|nada\s+(nuevo|mejor|diferente)|todo\s+(igual|normal)|sin\s+(novedad|cambio))", text):
        s.sarcasm += 1.0
        s.complaint += 0.5
        s.cues["sarcasm"].append("sarcasmo_seco_implÃ­cito")

        # sarcasmo hiperbÃ³lico o humor negro (esperas imposibles o exageradas)
    if re.search(r"(a este paso|antes de navidad|voy a envejecer|para el prÃ³ximo aÃ±o|en otra vida)", text):
        s.sarcasm += 1.3
        s.complaint += 0.6
        s.cues["sarcasm"].append("sarcasmo_hiperbolico_tiempo")

    return s

# ---------------------------
# DecisiÃ³n principal
# ---------------------------

def should_escalate(message:str)->Dict:
    if not message:
        return {"agent_response":"","should_escalate":False,"summary":{}}

    t = normalize(message)
    s = Scores()
    score_politeness(t, s)
    score_complaint(t, s)
    score_sarcasm(t, s)

    # --- DEBUG TEMPORAL (eliminar luego) ---
    print(">>> SHOULD_ESCALATE CALLED with raw message:", repr(message))
    print(">>> normalized text:", repr(t))
    print(">>> SCORES BEFORE DECISION -> sarcasm:", s.sarcasm, "complaint:", s.complaint, "politeness:", s.politeness)
    print(">>> CUES:", s.cues)
    # --- END DEBUG ---


    # ðŸ‘‰ NUEVO BLOQUE: sarcasmo fuerte cuenta como reclamo implÃ­cito
    if s.sarcasm >= THRESHOLDS["sarcasm"]:
        s.complaint += 0.8

    thr = THRESHOLDS["soft"] if s.sarcasm >= THRESHOLDS["sarcasm"] else THRESHOLDS["complaint"]

    # Escala automÃ¡ticamente si hay sarcasmo claro o emoji de frustraciÃ³n
    if (s.sarcasm >= 1.0 and s.sarcasm >= s.politeness) or any_emoji(t):
        escalate = True
    else:
        escalate = s.complaint >= thr

    summary = {
        "version": "v1.4.1",
        "scores": {
            "complaint": round(s.complaint, 2),
            "sarcasm": round(s.sarcasm, 2),
            "politeness": round(s.politeness, 2),
            "threshold": thr
        },
        "cues": s.cues,
        "priority_rule": "reclamo prevalece sobre cortesÃ­a"
    }

    if escalate:
        response = (
            "Entendido, escalarÃ© tu caso para que un asesor te contacte y revise tu solicitud. "
            "Un representante validarÃ¡ cobros, productos faltantes o demoras."
        )
    else:
        response = (
            "Quiero ayudarte mejor. Â¿PodrÃ­as indicar el nÃºmero de pedido y describir brevemente el problema "
            "(cobro errÃ³neo, producto faltante, demora, calidad)?"
        )
    
    # agrega esto dentro de should_escalate(), justo antes del return:
    print(">>> DEBUG SCORES:", s.sarcasm, s.complaint, s.politeness, s.cues)


    return {"agent_response": response, "should_escalate": escalate, "summary": summary}


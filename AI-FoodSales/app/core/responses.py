"""
M√≥dulo de generaci√≥n de respuestas AI-FoodSales
Versi√≥n: v1.4.0-courtesy-intents
Autor: Paulo & GPT-5 Lab
Descripci√≥n:
  - Prioridad total a reclamos (escalamiento antes que FAQ o log√≠stica)
  - Bloque de cortes√≠a para saludos, agradecimientos y cierres naturales
  - Flujo sem√°ntico ordenado: cortes√≠a ‚Üí escalation ‚Üí devoluci√≥n ‚Üí descuentos ‚Üí FAQ ‚Üí log√≠stica ‚Üí productos
  - 100 % compatible con formato JSON y manejo de multiproducto
"""

from unittest import result
from app.core.summary import build_summary
from app.core.escalation import should_escalate


# --- BLOQUE NUEVO: Cortes√≠a Contextual ---
courtesy_keywords = [
    "hola", "buenos d√≠as", "buenas tardes", "buenas noches",
    "gracias", "muy amable", "te agradezco", "muchas gracias",
    "listo", "perfecto", "de acuerdo", "vale", "ok", "entendido"
]


def detect_courtesy_intent(message: str) -> bool:
    """Detecta saludos o expresiones de cortes√≠a para evitar fallback innecesario."""
    message_lower = message.lower()
    return any(kw in message_lower for kw in courtesy_keywords)


def generate_courtesy_response(message: str) -> dict:
    """Genera respuestas emp√°ticas para cierres o saludos."""
    lower = message.lower()
    if any(greet in lower for greet in ["hola", "buenos d√≠as", "buenas tardes", "buenas noches"]):
        text = "¬°Hola! üòä ¬øEn qu√© puedo ayudarte hoy?"
    elif any(thanks in lower for thanks in ["gracias", "muy amable", "te agradezco", "muchas gracias"]):
        text = "¬°Con gusto! Si necesitas algo m√°s, estoy aqu√≠ para ayudarte. üôå"
    elif any(close in lower for close in ["listo", "perfecto", "de acuerdo", "vale", "ok", "entendido"]):
        text = "Excelente üëç. Quedo atento por si deseas continuar con tu pedido o consulta."
    else:
        text = "Estoy aqu√≠ si necesitas m√°s informaci√≥n. üòä"

    return {
        "agent_response": text,
        "should_escalate": False,
        "summary": build_summary(message, text),
    }
# --- FIN BLOQUE NUEVO ---


def generate_response(product_data: dict, message: str):
    """
    Genera la respuesta del agente de ventas.
    """

    if not message or not isinstance(message, str):
        return {
            "agent_response": "No entend√≠ tu mensaje. ¬øPodr√≠as reformularlo?",
            "should_escalate": False,
            "summary": build_summary(message, "Entrada inv√°lida o vac√≠a."),
        }

    msg = message.lower().strip()
    should_escalate_flag = False
    response_text = ""

    # --- EXCEPCI√ìN: consultas sobre IVA ---
    import re
    if re.search(r"\biva\b", msg) or "incluye iva" in msg or "precio con iva" in msg:
        response_text = (
            "Todos nuestros precios incluyen IVA, salvo que se indique lo contrario en la descripci√≥n del producto."
        )
        return {
            "agent_response": response_text,
            "should_escalate": False,
            "summary": build_summary(message, response_text),
        }

    # --- EXCEPCI√ìN: consultas sobre INVIMA ---
    if "invima" in msg or "certificado invima" in msg:
        response_text = (
            "S√≠, todos nuestros productos cuentan con registro sanitario INVIMA vigente "
            "y cumplen con las normas de calidad establecidas por las autoridades."
        )
        return {
            "agent_response": response_text,
            "should_escalate": False,
            "summary": build_summary(message, response_text),
        }
    
    # --- EXCEPCI√ìN: tiempos de entrega por ciudad o regi√≥n ---
    if "entrega" in msg or "llegada" in msg:
        import re

        # Detecta ciudad tras "en", "a" o "para", incluso con frases intermedias
        match = re.search(
            r"(?:en|a|para)\s+(?:la\s+entrega\s+a\s+)?([A-Z√Å√â√ç√ì√ö√ëa-z√°√©√≠√≥√∫√±]{3,}(?:\s+[A-Z√Å√â√ç√ì√ö√ëa-z√°√©√≠√≥√∫√±]+)*)",
            message,
            re.UNICODE | re.IGNORECASE
        )

        ciudad = ""
        if match:
            posible = match.group(1).strip()
            # Evita falsos positivos como "entrega", "pedido", etc.
            if not re.search(r"\b(entrega|pedido|compra|env√≠o|orden|la|el|los|las|para|en|a)\b", posible, re.IGNORECASE):
                ciudad = " ".join([p.capitalize() for p in posible.split()])

        # Si no detect√≥ ciudad pero la frase tiene 'para' seguido de un nombre, capturarlo igualmente
        if not ciudad:
            match_alt = re.search(
                r"para\s+([A-Z√Å√â√ç√ì√ö√ëa-z√°√©√≠√≥√∫√±]{3,}(?:\s+[A-Z√Å√â√ç√ì√ö√ëa-z√°√©√≠√≥√∫√±]+)*)",
                message,
                re.UNICODE | re.IGNORECASE
            )
            if match_alt:
                posible = match_alt.group(1).strip()
                if not re.search(r"\b(entrega|pedido|compra|env√≠o|orden|la|el|los|las|para|en|a)\b", posible, re.IGNORECASE):
                    ciudad = " ".join([p.capitalize() for p in posible.split()])

        if ciudad:
            response_text = f"El tiempo estimado de entrega en {ciudad} es de 2 a 5 d√≠as h√°biles, seg√∫n disponibilidad log√≠stica."
        else:
            response_text = "Los tiempos de entrega son de 2 a 5 d√≠as h√°biles en ciudades principales y de 4 a 6 d√≠as en zonas regionales."

        return {
            "agent_response": response_text,
            "should_escalate": False,
            "summary": build_summary(message, response_text),
        }




    result = should_escalate(msg)


    # üí¨ 1Ô∏è‚É£ PRIORIDAD: sarcasmo o reclamo ANTES de cortes√≠a
    if isinstance(result, dict):
        sarcasm_score = result["summary"]["scores"]["sarcasm"]
        complaint_score = result["summary"]["scores"]["complaint"]
        if sarcasm_score >= 0.8 or complaint_score >= 1.2:
            result["should_escalate"] = True
            print(">>> RESPUESTA ESCALADA (sarcasmo/reclamo detectado)")
            return result

    # üí¨ 2Ô∏è‚É£ Cortes√≠a natural (saludos, agradecimientos, cierres)
    if detect_courtesy_intent(msg):
        return generate_courtesy_response(msg)


    # üíî 3Ô∏è‚É£ Bloque emp√°tico: producto da√±ado, mal olor, vencido
    if any(term in msg for term in ["da√±ado", "mal olor", "defectuoso", "vencido", "en mal estado"]):
        return {
            "agent_response": (
                "Lamentamos el inconveniente. Si un producto lleg√≥ da√±ado o en mal estado, "
                "puedes solicitar una devoluci√≥n o cambio dentro de las 48 horas siguientes. "
                "¬øDeseas que te env√≠e las instrucciones?"
            ),
            "should_escalate": False,
            "summary": build_summary(message, "Caso tratado como devoluci√≥n por defecto de producto."),
        }

    # üß† 4Ô∏è‚É£ Intenciones adicionales (descuentos, FAQ, etc.)
    from app.core.nlp_rules import detect_additional_intents
    intents = detect_additional_intents(message)
    if intents["should_escalate"]:
        should_escalate_flag = True

    if intents["discount_info"]:
        response_text = build_discount_response(message)
        return {
            "agent_response": response_text,
            "should_escalate": should_escalate_flag,
            "summary": build_summary(message, response_text),
        }

    if intents["faq"]:
        response_text = (
            "Pedidos m√≠nimos: 4 unidades (Congelados), 5 (L√°cteos), 12 (Bebidas) o $200.000 COP mixto.\n"
            "Tiempos de entrega: 2‚Äì3 d√≠as h√°biles principales / 4‚Äì6 regionales.\n"
            "Formas de pago: transferencia, tarjeta o contraentrega (zonas urbanas).\n"
            "Devoluciones: m√°ximo 24h con evidencia.\n"
            "¬øQuieres que te gestione una cotizaci√≥n o m√°s informaci√≥n?"
        )
        return {
            "agent_response": response_text,
            "should_escalate": should_escalate_flag,
            "summary": build_summary(message, response_text),
        }

    # üöö 5Ô∏è‚É£ Log√≠stica
    from app.core.nlp_rules import detect_logistics_intent
    logistic_detected, logistic_data = detect_logistics_intent(message)
    if logistic_detected:
        subtype = logistic_data.get("type")
        city = logistic_data.get("city")
        response_text = build_logistics_response(subtype, city)
        return {
            "agent_response": response_text,
            "should_escalate": should_escalate_flag,
            "summary": build_summary(message, response_text),
        }
    # üì¶ 6Ô∏è‚É£ Productos (soporte multiproducto con c√°lculo de precios)
    print(f"[DEBUG] product_data recibido en responses: {product_data}", flush=True)

    # üì¶ Productos (soporte multiproducto con c√°lculo de precios)
    if product_data:
        from app.core.pricing import calculate_total
        response_lines = []
        total_general = 0

        # Soporte multiproducto
        if isinstance(product_data, list):
            for p in product_data:
                cantidad = int(p.get("cantidad", 1))
                print(f"[RESPONSES] Invocando calculate_total() para {p.get('nombre')}", flush=True)
                print(f"[TRACE] p keys: {list(p.keys())}", flush=True)

                # calculate_total retorna string, pero podemos extraer valor num√©rico
                line_text = calculate_total(p, cantidad)
                response_lines.append(line_text)

                # Captura num√©rica del total por producto (solo n√∫meros)
                import re
                m = re.search(r"Total: \$([\d,.]+)", line_text)
                if m:
                    total_general += float(m.group(1).replace(",", ""))

        else:
            cantidad = int(product_data.get("cantidad", 1))
            print(f"[RESPONSES] Invocando calculate_total() para {product_data.get('nombre')}", flush=True)
            line_text = calculate_total(product_data, cantidad)
            response_lines.append(line_text)
            import re
            m = re.search(r"Total: \$([\d,.]+)", line_text)
            if m:
                total_general += float(m.group(1).replace(",", ""))

        if total_general > 0:
            response_lines.append(f"Total general: ${total_general:,.0f} COP")

        response_text = "\n".join(response_lines)
    else:
        response_text = "No pude identificar el producto en tu mensaje. ¬øPodr√≠as darme m√°s detalles?"


def build_logistics_response(subtype: str, city: str | None = None) -> str:
    city_delivery_map = {
        "bogota": "Para Bogot√°: entrega en 2‚Äì3 d√≠as h√°biles.",
        "medellin": "Para Medell√≠n: entrega en 2‚Äì3 d√≠as h√°biles.",
        "cali": "Para Cali: entrega en 3‚Äì4 d√≠as h√°biles.",
        "barranquilla": "Para Barranquilla: entrega en 3‚Äì5 d√≠as h√°biles.",
        "cartagena": "Para Cartagena: entrega en 3‚Äì5 d√≠as h√°biles.",
        "bucaramanga": "Para Bucaramanga: entrega en 3‚Äì5 d√≠as h√°biles.",
        "pereira": "Para Pereira: entrega en 3‚Äì4 d√≠as h√°biles.",
        "manizales": "Para Manizales: entrega en 3‚Äì4 d√≠as h√°biles.",
        "cucuta": "Para C√∫cuta (zona regional): entrega en 4‚Äì6 d√≠as h√°biles.",
    }

    if subtype == "weekend":
        return (
            "Realizamos entregas de lunes a s√°bado. "
            "Los domingos est√°n sujetos a disponibilidad del operador log√≠stico. "
            "¬øDeseas que te confirme si tu zona tiene cobertura en fin de semana?"
        )
    elif subtype == "time_window":
        return (
            "Nuestros repartos se programan por franjas horarias: "
            "ma√±ana (8‚Äì12), tarde (12‚Äì17) y noche (17‚Äì20), seg√∫n cobertura. "
            "¬øDeseas que te confirme la franja disponible para tu zona?"
        )
    elif subtype == "coverage":
        return (
            "Realizamos env√≠os a nivel nacional. Cobertura directa en ciudades principales "
            "y v√≠a transportadora para zonas regionales. ¬øDeseas que valide si llegamos a tu municipio?"
        )
    elif subtype == "city_delivery":
        if city:
            key = city.lower()
            city_text = city_delivery_map.get(key, "")
            return (city_text + " ¬øDeseas que te confirme el tiempo exacto de entrega en esa zona?").strip()
    return (
        "Los tiempos de entrega son de 2 a 3 d√≠as h√°biles en ciudades principales "
        "y de 4 a 6 d√≠as en regionales. ¬øDeseas que te confirme la disponibilidad para tu zona?"
    )


def build_discount_response(message: str) -> str:
    msg = message.lower()
    if any(k in msg for k in ["bebida", "jugos", "agua", "gaseosa"]):
        return "Actualmente tenemos 10% de descuento en bebidas y jugos seleccionados."
    elif any(k in msg for k in ["l√°cteo", "queso", "yogurt", "leche"]):
        return "Tenemos 8% de descuento en l√°cteos esta semana."
    elif any(k in msg for k in ["congelado", "carne", "pollo", "pescado"]):
        return "Promoci√≥n del 12% en congelados hasta el domingo."
    else:
        return "Tenemos promociones activas en varias categor√≠as. ¬øTe gustar√≠a conocer las ofertas actuales?"

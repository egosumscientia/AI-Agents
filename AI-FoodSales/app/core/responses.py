"""
M√≥dulo de generaci√≥n de respuestas AI-FoodSales
Versi√≥n: v1.4.0-courtesy-intents
Autor: Paulo & GPT-5 Lab
Descripci√≥n:
  - Prioridad total a reclamos (escalamiento antes que FAQ o log√≠stica)
  - Bloque de cortes√≠a para saludos, agradecimientos y cierres naturales
  - Flujo sem√°ntico ordenado: cortes√≠a ‚Üí escalation ‚Üí devoluci√≥n ‚Üí descuentos ‚Üí FAQ ‚Üí log√≠stica ‚Üí productos
  - 100 % compatible con formato JSON y manejo de multiproducto
"""

from app.core.summary import build_summary
from app.core.escalation import should_escalate


# --- BLOQUE NUEVO: Cortes√≠a Contextual ---
courtesy_keywords = [
    "hola", "buenos d√≠as", "buenas tardes", "buenas noches",
    "gracias", "muy amable", "te agradezco", "muchas gracias",
    "listo", "perfecto", "de acuerdo", "vale", "ok", "entendido"
]


def detect_courtesy_intent(message: str) -> bool:
    """Detecta saludos o expresiones de cortes√≠a para evitar fallback innecesario."""
    message_lower = message.lower()
    return any(kw in message_lower for kw in courtesy_keywords)


def generate_courtesy_response(message: str) -> dict:
    """Genera respuestas emp√°ticas para cierres o saludos."""
    lower = message.lower()
    if any(greet in lower for greet in ["hola", "buenos d√≠as", "buenas tardes", "buenas noches"]):
        text = "¬°Hola! üòä ¬øEn qu√© puedo ayudarte hoy?"
    elif any(thanks in lower for thanks in ["gracias", "muy amable", "te agradezco", "muchas gracias"]):
        text = "¬°Con gusto! Si necesitas algo m√°s, estoy aqu√≠ para ayudarte. üôå"
    elif any(close in lower for close in ["listo", "perfecto", "de acuerdo", "vale", "ok", "entendido"]):
        text = "Excelente üëç. Quedo atento por si deseas continuar con tu pedido o consulta."
    else:
        text = "Estoy aqu√≠ si necesitas m√°s informaci√≥n. üòä"

    return {
        "agent_response": text,
        "should_escalate": False,
        "summary": build_summary(message, text),
    }
# --- FIN BLOQUE NUEVO ---


def generate_response(product_data: dict, message: str):
    """
    Genera la respuesta del agente de ventas.
    """

    if not message or not isinstance(message, str):
        return {
            "agent_response": "No entend√≠ tu mensaje. ¬øPodr√≠as reformularlo?",
            "should_escalate": False,
            "summary": build_summary(message, "Entrada inv√°lida o vac√≠a."),
        }

    msg = message.lower().strip()
    should_escalate_flag = False
    response_text = ""

    # üí¨ 1Ô∏è‚É£ Priorizar cortes√≠a natural (saludos, agradecimientos, cierres)
    if detect_courtesy_intent(msg):
        return generate_courtesy_response(msg)

    # üö® 2Ô∏è‚É£ Reclamos y errores (escalamiento)
    if should_escalate(msg):
        return {
            "agent_response": (
                "Entendido, escalar√© tu caso para que un asesor te contacte y revise tu solicitud. "
                "Un representante verificar√° el pedido o la facturaci√≥n en breve."
            ),
            "should_escalate": True,
            "summary": build_summary(message, "Caso escalado por reclamo log√≠stico o financiero."),
        }

    # üíî 3Ô∏è‚É£ Bloque emp√°tico: producto da√±ado, mal olor, vencido
    if any(term in msg for term in ["da√±ado", "mal olor", "defectuoso", "vencido", "en mal estado"]):
        return {
            "agent_response": (
                "Lamentamos el inconveniente. Si un producto lleg√≥ da√±ado o en mal estado, "
                "puedes solicitar una devoluci√≥n o cambio dentro de las 48 horas siguientes. "
                "¬øDeseas que te env√≠e las instrucciones?"
            ),
            "should_escalate": False,
            "summary": build_summary(message, "Caso tratado como devoluci√≥n por defecto de producto."),
        }

    # üß† 4Ô∏è‚É£ Intenciones adicionales (descuentos, FAQ, etc.)
    from app.core.nlp_rules import detect_additional_intents
    intents = detect_additional_intents(message)
    if intents["should_escalate"]:
        should_escalate_flag = True

    if intents["discount_info"]:
        response_text = build_discount_response(message)
        return {
            "agent_response": response_text,
            "should_escalate": should_escalate_flag,
            "summary": build_summary(message, response_text),
        }

    if intents["faq"]:
        response_text = (
            "Pedidos m√≠nimos: 4 unidades (Congelados), 5 (L√°cteos), 12 (Bebidas) o $200.000 COP mixto.\n"
            "Tiempos de entrega: 2‚Äì3 d√≠as h√°biles principales / 4‚Äì6 regionales.\n"
            "Formas de pago: transferencia, tarjeta o contraentrega (zonas urbanas).\n"
            "Devoluciones: m√°ximo 24h con evidencia.\n"
            "¬øQuieres que te gestione una cotizaci√≥n o m√°s informaci√≥n?"
        )
        return {
            "agent_response": response_text,
            "should_escalate": should_escalate_flag,
            "summary": build_summary(message, response_text),
        }

    # üöö 5Ô∏è‚É£ Log√≠stica
    from app.core.nlp_rules import detect_logistics_intent
    logistic_detected, logistic_data = detect_logistics_intent(message)
    if logistic_detected:
        subtype = logistic_data.get("type")
        city = logistic_data.get("city")
        response_text = build_logistics_response(subtype, city)
        return {
            "agent_response": response_text,
            "should_escalate": should_escalate_flag,
            "summary": build_summary(message, response_text),
        }

    # üì¶ 6Ô∏è‚É£ Productos (soporte multiproducto)
    if product_data:
        productos = []
        if isinstance(product_data, list):
            for p in product_data:
                nombre = p.get("nombre", "Producto sin nombre")
                categoria = p.get("categoria", "general")
                productos.append(f"- {nombre} ({categoria})")
        else:
            nombre = product_data.get("nombre", "Producto sin nombre")
            categoria = product_data.get("categoria", "general")
            productos.append(f"- {nombre} ({categoria})")

        joined = "\n".join(productos)
        response_text = (
            f"Tenemos disponibles los siguientes productos:\n{joined}\n"
            "¬øDeseas que te env√≠e la cotizaci√≥n detallada?"
        )
    else:
        response_text = "No pude identificar el producto en tu mensaje. ¬øPodr√≠as darme m√°s detalles?"

    return {
        "agent_response": response_text,
        "should_escalate": should_escalate_flag,
        "summary": build_summary(message, response_text),
    }


def build_logistics_response(subtype: str, city: str | None = None) -> str:
    city_delivery_map = {
        "bogota": "Para Bogot√°: entrega en 2‚Äì3 d√≠as h√°biles.",
        "medellin": "Para Medell√≠n: entrega en 2‚Äì3 d√≠as h√°biles.",
        "cali": "Para Cali: entrega en 3‚Äì4 d√≠as h√°biles.",
        "barranquilla": "Para Barranquilla: entrega en 3‚Äì5 d√≠as h√°biles.",
        "cartagena": "Para Cartagena: entrega en 3‚Äì5 d√≠as h√°biles.",
        "bucaramanga": "Para Bucaramanga: entrega en 3‚Äì5 d√≠as h√°biles.",
        "pereira": "Para Pereira: entrega en 3‚Äì4 d√≠as h√°biles.",
        "manizales": "Para Manizales: entrega en 3‚Äì4 d√≠as h√°biles.",
        "cucuta": "Para C√∫cuta (zona regional): entrega en 4‚Äì6 d√≠as h√°biles.",
    }

    if subtype == "weekend":
        return (
            "Realizamos entregas de lunes a s√°bado. "
            "Los domingos est√°n sujetos a disponibilidad del operador log√≠stico. "
            "¬øDeseas que te confirme si tu zona tiene cobertura en fin de semana?"
        )
    elif subtype == "time_window":
        return (
            "Nuestros repartos se programan por franjas horarias: "
            "ma√±ana (8‚Äì12), tarde (12‚Äì17) y noche (17‚Äì20), seg√∫n cobertura. "
            "¬øDeseas que te confirme la franja disponible para tu zona?"
        )
    elif subtype == "coverage":
        return (
            "Realizamos env√≠os a nivel nacional. Cobertura directa en ciudades principales "
            "y v√≠a transportadora para zonas regionales. ¬øDeseas que valide si llegamos a tu municipio?"
        )
    elif subtype == "city_delivery":
        if city:
            key = city.lower()
            city_text = city_delivery_map.get(key, "")
            return (city_text + " ¬øDeseas que te confirme el tiempo exacto de entrega en esa zona?").strip()
    return (
        "Los tiempos de entrega son de 2 a 3 d√≠as h√°biles en ciudades principales "
        "y de 4 a 6 d√≠as en regionales. ¬øDeseas que te confirme la disponibilidad para tu zona?"
    )


def build_discount_response(message: str) -> str:
    msg = message.lower()
    if any(k in msg for k in ["bebida", "jugos", "agua", "gaseosa"]):
        return "Actualmente tenemos 10% de descuento en bebidas y jugos seleccionados."
    elif any(k in msg for k in ["l√°cteo", "queso", "yogurt", "leche"]):
        return "Tenemos 8% de descuento en l√°cteos esta semana."
    elif any(k in msg for k in ["congelado", "carne", "pollo", "pescado"]):
        return "Promoci√≥n del 12% en congelados hasta el domingo."
    else:
        return "Tenemos promociones activas en varias categor√≠as. ¬øTe gustar√≠a conocer las ofertas actuales?"
